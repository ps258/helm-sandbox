#!/bin/bash -u

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:$PATH

REDIS_YAML=$(mktemp /tmp/redis.yaml.XXXX)
MONGO_YAML=$(mktemp /tmp/mongo.yaml.XXXX)
TYK_YAML=$(mktemp /tmp/tyk-pro.yaml.XXXX)
NAMESPACE_YAML=$(mktemp /tmp/namespace.yaml.XXXX)
OPERATOR_CONTEXT_YAML=$(mktemp /tmp/operator-context.yaml.XXXX)
IP=$(minikube ip)
NAMESPACE_SELECTOR="creator=hsbctl"
EXTRA_NAMESPACE_LABELS=''
ISTIO_INJECTION_LABEL='istio-injection=enabled'
HSBX_DESCRIPTION='N/A'
HSBX_TYPE=pro

SCRIPTNAME=$0
SCRIPTDIR=$(
	cd "$(dirname $SCRIPTNAME)"
	echo $PWD
)
VERSIONFILE="$SCRIPTDIR/tyk-versions.list"

trap 'rm -f $REDIS_YAML $MONGO_YAML $TYK_YAML $NAMESPACE_YAML $OPERATOR_CONTEXT_YAML' 0 1 2 3 15

if [[ -f ~/.tyk-sandbox ]]; then
	. ~/.tyk-sandbox
	HSBX_BOOTSTRAP=true
else
	SBX_LICENSE=""
	SBX_USER=""
	SBX_PASSWORD=""
	HSBX_BOOTSTRAP=false
fi

function help {
	typeset name
	name=$(basename $SCRIPTNAME)
	echo "[USAGE]:"
	echo "$name create -v <tyk version> -t <namespace description> [-p|-s] -i"
	echo "      Create a tyk instance the name space given as a tag"
	echo "      -i add the istio label to the namespace so istio is injected into the pods"
	echo "      -p deploy with postgres not mongo"
	echo "      -s deploy a stand alone gateway"
	echo "$name delete <namespace>"
	echo "      Delete the namespace given as a tag and all resources in it"
	echo "$name list"
	echo "      List all namespaces"
	echo "$name logs <namespace> <podname>"
	echo "      Tail the logs of the named pod"
	echo "$name info <namespace>"
	echo "      Print info on the particular instance"
	echo "$name publish <sandbox namespace> <api.yaml ...>"
	echo "      Publish the API in api.yaml into the sandbox"
	echo "$name shell <namespace> <pod>"
	echo "      Start an interactive shell in the pod."
	echo "      The pod name can be a substring of the actual name"
	echo "      eg. $name shell ns1 dashboard"
}

# isolated to keep IFS from leaking
function loadVersions {
	typeset line
	typeset gwVers
	typeset dshbVers
	typeset pumpVers
	typeset TIBvers
	typeset syncVers
	typeset version
	line=$1
	version=$(echo $line | awk -F, '{print $1}')
	gwVers=$(echo $line | awk -F, '{print $2}')
	dshbVers=$(echo $line | awk -F, '{print $3}')
	pumpVers=$(echo $line | awk -F, '{print $4}')
	TIBvers=$(echo $line | awk -F, '{print $5}')
	syncVers=$(echo $line | awk -F, '{print $6}')
	export HSBX_GATE_VERS="v${gwVers%%-*}"
	export HSBX_DASH_VERS="v${dshbVers%%-*}"
	export HSBX_PUMP_VERS="v${pumpVers%%-*}"
	export HSBX_MDCB_VERS="v${syncVers%%-*}"
}

function getInstallType {
  HSBX_TYPE=$(kubectl get configmap sandbox-details -n $NAMESPACE -o json | jq -r .data.HSBX_TYPE)
	echo HSBX_TYPE = $HSBX_TYPE
}

function createNamespace {
	if ! namespaceExists $NAMESPACE; then
		echo "[INFO]kubectl create ns $NAMESPACE"
		kubectl create ns $NAMESPACE
		echo "[INFO]kubectl label ns $NAMESPACE $NAMESPACE_SELECTOR $EXTRA_NAMESPACE_LABELS"
		kubectl label ns $NAMESPACE $NAMESPACE_SELECTOR $EXTRA_NAMESPACE_LABELS
		# setup config map in the new namespace with the details of the deployment
		echo "apiVersion: v1" > $NAMESPACE_YAML
		echo "data:" >> $NAMESPACE_YAML
		if [[ -n $sandboxVersion ]]; then
			echo "  HSBX_VERSION: $sandboxVersion" >> $NAMESPACE_YAML
		fi
		if [[ -n $HSBX_GATE_VERS ]]; then
			echo "  HSBX_GW: $HSBX_GATE_VERS" >> $NAMESPACE_YAML
		fi
		if [[ -n $HSBX_DASH_VERS ]]; then
			echo "  HSBX_DB: $HSBX_DASH_VERS" >> $NAMESPACE_YAML
		fi
		if [[ -n $HSBX_PUMP_VERS ]]; then
			echo "  HSBX_PMP: $HSBX_PUMP_VERS" >> $NAMESPACE_YAML
		fi
		if [[ -n $HSBX_MDCB_VERS ]]; then
			echo "  HSBX_MDCB: $HSBX_MDCB_VERS" >> $NAMESPACE_YAML
		fi
		echo "  HSBX_TYPE: $HSBX_TYPE" >> $NAMESPACE_YAML
		echo "  HSBX_DESCRIPTION: $HSBX_DESCRIPTION" >> $NAMESPACE_YAML
		echo "kind: ConfigMap" >> $NAMESPACE_YAML
		echo "metadata:" >> $NAMESPACE_YAML
		echo "  namespace: \"$NAMESPACE\"" >> $NAMESPACE_YAML
		echo "  name: sandbox-details" >> $NAMESPACE_YAML
		kubectl apply -f $NAMESPACE_YAML -n $NAMESPACE
		echo "[INFO]Created namespace '$NAMESPACE'"
	fi
}

function namespaceExists {
	kubectl get namespaces --no-headers=true | grep -wq $NAMESPACE
	return $?
}

function runShell {
	typeset podType
	typeset pod
	for podType in $*
	do
		echo "[INFO]Creating shell for $podType"
		for pod in $(kubectl get pods -n $NAMESPACE | awk '/'$podType'/ {print $1}')
		do
			# if ncurses-base isnt installed then TERM isn't recognised
			# I found it was installed in some images but not others
			echo "[INFO]Checking for ncurses-base in $pod"
			if ! kubectl exec $pod -n $NAMESPACE -- test -d /lib/terminfo >/dev/null 2>&1; then
				echo "[INFO]Installing ncurses-base to provide terminal types to the shell"
				kubectl exec $pod -n $NAMESPACE -- apt install ncurses-base -y > /dev/null 2>&1
			fi
			echo "[INFO]starting bash in $pod"
			echo "[INFO]kubectl exec $pod -n $NAMESPACE -it -- /bin/bash"
			kubectl exec $pod -n $NAMESPACE -it -- /bin/bash
		done
	done
}

# find the next namespace index that's unused
function nextFreeNamespace {
	typeset existing
	typeset i
	existing=$(kubectl get namespaces --selector=$NAMESPACE_SELECTOR --no-headers=true | awk '{print $1}')
	for i in $(seq 1 1000); do
		test="hsandbox-$i"
		if ! echo $existing | grep -qw $test; then
			echo $i
			break
		fi
	done
}

function listPods {
	kubectl get pods -n $NAMESPACE
}

function deployRedis {
	echo "[INFO]Deploying redis"
	# override the defaults
	helm show values bitnami/redis > $REDIS_YAML
	yq '.auth.enabled = false' -i $REDIS_YAML
	yq '.image.tag = "6.0.10"' -i $REDIS_YAML
	yq '.architecture = "standalone"' -i $REDIS_YAML
	# the bitnami chart adds -master to the name so just call it 'tyk-redis' here and then connect using 'tyk-redis-master'
	# deploy the bitnami/redis chart and wait for it
	helm install tyk-redis bitnami/redis -f $REDIS_YAML -n $NAMESPACE --wait
}

function deployMongodb {
	echo "[INFO]Deploying mongodb"
	# override the defaults
	helm show values bitnami/mongodb > $MONGO_YAML
	yq '.auth.enabled = false' -i $MONGO_YAML
	yq '.image.tag = "4.4"' -i $MONGO_YAML
	yq '.architecture = "standalone"' -i $MONGO_YAML
	# disable the liveness and readines probes because they take too much CPU
	yq '.livenessProbe.enabled = false' -i $MONGO_YAML
	yq '.readinessProbe.enabled = false' -i $MONGO_YAML
	# the bitnami chart adds -mongodb to the name so just call it 'tyk' here and then connect using 'tyk-mongodb'
	# it takes a while to start so wait for it
	helm install tyk bitnami/mongodb -f $MONGO_YAML -n $NAMESPACE --wait
}

function deployHeadless {

	echo "[INFO]Deploying Headless gateway"
	helm show values tyk-helm/tyk-headless > $TYK_YAML
	yq '.gateway.image.tag = "'$HSBX_GATE_VERS'"' -i $TYK_YAML

	# setup redis and mongo connections in tyk's yaml
	yq '.redis.addrs = "tyk-redis-master.'$NAMESPACE'.svc.cluster.local:6379"' -i $TYK_YAML
	yq '.mongo.mongoURL = "mongodb://tyk-mongodb.'$NAMESPACE'.svc.cluster.local:27017/tyk_analytics"' -i $TYK_YAML

	## set env variables
	# debug logging
	yq '.pump.extraEnvs += { "name": "TYK_LOGLEVEL", "value": "debug" }' -i $TYK_YAML
	yq '.gateway.extraEnvs += { "name": "TYK_LOGLEVEL", "value": "debug" }' -i $TYK_YAML
	yq '.dash.extraEnvs += { "name": "TYK_LOGLEVEL", "value": "debug" }' -i $TYK_YAML

	# change the gateway kind to deployment
	yq '.gateway.kind = "Deployment"' -i $TYK_YAML

	# things operator needs
	yq '.gateway.extraEnvs += { "name": "TYK_GW_POLICIES_ALLOWEXPLICITPOLICYID", "value": "true" }' -i $TYK_YAML

	helm install tyk-pro tyk-helm/tyk-headless -f $TYK_YAML -n $NAMESPACE --wait
}

function deployPro {
	echo "[INFO]Deploying dashboard, gateway and pump"
	helm show values tyk-helm/tyk-pro > $TYK_YAML
	yq '.dash.image.tag = "'$HSBX_DASH_VERS'"' -i $TYK_YAML
	yq '.gateway.image.tag = "'$HSBX_GATE_VERS'"' -i $TYK_YAML
	yq '.pump.image.tag = "'$HSBX_PUMP_VERS'"' -i $TYK_YAML

	# setup redis and mongo connections in tyk's yaml
	yq '.redis.addrs = "tyk-redis-master.'$NAMESPACE'.svc.cluster.local:6379"' -i $TYK_YAML
	yq '.mongo.mongoURL = "mongodb://tyk-mongodb.'$NAMESPACE'.svc.cluster.local:27017/tyk_analytics"' -i $TYK_YAML

	## set env variables
	# debug logging
	yq '.pump.extraEnvs += { "name": "TYK_LOGLEVEL", "value": "debug" }' -i $TYK_YAML
	yq '.gateway.extraEnvs += { "name": "TYK_LOGLEVEL", "value": "debug" }' -i $TYK_YAML
	yq '.dash.extraEnvs += { "name": "TYK_LOGLEVEL", "value": "debug" }' -i $TYK_YAML

	# enable key listing
	yq '.dash.extraEnvs += { "name": "TYK_DB_ENABLEHASHEDKEYSLISTING", "value": "true" }' -i $TYK_YAML
	yq '.gateway.extraEnvs += { "name": "TYK_GW_ENABLEHASHEDKEYSLISTING", "value": "true" }' -i $TYK_YAML
	yq '.gateway.extraEnvs += { "name": "TYK_GW_HASHKEYFUNCTION", "value": "murmur64" }' -i $TYK_YAML
	yq '.gateway.extraEnvs += { "name": "TYK_GW_ENABLEJSVM", "value": "true" }' -i $TYK_YAML

	# change the gateway kind to deployment
	yq '.gateway.kind = "Deployment"' -i $TYK_YAML

	# things operator needs
	yq '.gateway.extraEnvs += { "name": "TYK_GW_POLICIES_ALLOWEXPLICITPOLICYID", "value": "true" }' -i $TYK_YAML

	if [[ $HSBX_BOOTSTRAP  == 'true' ]]; then
		yq '.dash.adminUser.email = "'$SBX_USER'"' -i $TYK_YAML
		yq '.dash.adminUser.password = "'$(echo $SBX_PASSWORD| base64 -d)'"' -i $TYK_YAML
		yq '.dash.license = "'$SBX_LICENSE'"' -i $TYK_YAML
		yq '.dash.bootstrap = "true"' -i $TYK_YAML
	else
		yq '.dash.bootstrap = "false"' -i $TYK_YAML
	fi
	helm install tyk-pro tyk-helm/tyk-pro -f $TYK_YAML -n $NAMESPACE --wait
}

function deployOperatorContext {
	typeset adminKey
	typeset dashURL
	typeset orgid
	typeset OperatorContextYAML
	OperatorContextYAML=$(mktemp /tmp/operatorContext.yaml.XXXX)
	adminkey=$(getAdminUserKey)
	dashURL="http://$IP:$(getDashboardPort)/"
	orgid=$(getOrgID)
	echo "Deploying operator context into new environment"
	echo "apiVersion: tyk.tyk.io/v1alpha1" > $OperatorContextYAML
	echo "kind: OperatorContext" >> $OperatorContextYAML
	echo "metadata:" >> $OperatorContextYAML
	echo "  name: local-operator-context" >> $OperatorContextYAML
	echo "spec:" >> $OperatorContextYAML
	echo "  env:" >> $OperatorContextYAML
	echo "    mode: pro" >> $OperatorContextYAML
	echo "    auth: $adminkey" >> $OperatorContextYAML
	echo "    org: $orgid" >> $OperatorContextYAML
	echo "    url: $dashURL" >> $OperatorContextYAML
	echo "    insecureSkipVerify: true" >> $OperatorContextYAML
	echo "[INFO]kubectl apply -f $OperatorContextYAML -n $NAMESPACE"
	kubectl apply -f $OperatorContextYAML -n $NAMESPACE
	rm -f $OperatorContextYAML
}

function deployAPIs {
	typeset APIsourceYaml
	typeset tmpAPIyaml
	tmpAPIyaml=$(mktemp /tmp/API.yaml.XXXX)
	for APIsourceYaml in $*; do
		if [[ -f $APIsourceYaml ]]; then
			cp $APIsourceYaml $tmpAPIyaml
			yq ".spec.contextRef.namespace = \"$NAMESPACE\"" -i $tmpAPIyaml
			echo "[INFO]kubectl apply -f $tmpAPIyaml -n $NAMESPACE"
			kubectl apply -f $tmpAPIyaml -n $NAMESPACE
		fi
	done
	rm -f $tmpAPIyaml
}

function getDashboardPort {
	kubectl get --namespace $NAMESPACE -o jsonpath="{.spec.ports[0]}" services dashboard-svc-tyk-pro | jq -r .nodePort
}

function getGatewayPort {
	kubectl get --namespace $NAMESPACE -o jsonpath="{.spec.ports[0]}" services gateway-svc-tyk-pro | jq -r .nodePort
}

function getDescription {
	kubectl get configmap sandbox-details -n $NAMESPACE -o json | jq -r .data.HSBX_DESCRIPTION
}

function getAdminUserKey {
	# looks up admin user key from the adminuserkey config map if it exists or creates it if it doesn't
	typeset adminuserkey
	if kubectl get configmap -n $NAMESPACE adminuserkey > /dev/null 2>&1; then
		# retrieve the admin user key from the config map and return them
		adminuserkey=$(kubectl get configmap -n $NAMESPACE adminuserkey --no-headers=true -o json | jq -r .data.adminuserkey)
	else
		# get the admin user key from the dashboard logs, store it for next time and return it
		typeset dashboardPod
		typeset configmapYAML
		dashboardPod=$(kubectl get pods -n $NAMESPACE | awk '/dashboard-tyk-pro/ {print $1}' | head -1)
		adminuserkey=$(kubectl logs $dashboardPod -n $NAMESPACE | awk '/Setting key=/ && !/key=[[:xdigit:]]+-/ {print $NF; exit}'| cut -d= -f2 | tr -d '"')
		if [[ -n $adminuserkey ]]; then
			configmapYAML=$(mktemp /tmp/configmapYAML.yaml.XXXX)
			echo "apiVersion: v1" > $configmapYAML
			echo "data:" >> $configmapYAML
			echo "  adminuserkey: $adminuserkey" >> $configmapYAML
			echo "kind: ConfigMap" >> $configmapYAML
			echo "metadata:" >> $configmapYAML
			echo "  namespace: \"$NAMESPACE\"" >> $configmapYAML
			echo "  name: adminuserkey" >> $configmapYAML
			kubectl apply -f $configmapYAML -n $NAMESPACE > /dev/null 2>&1
			rm -f $configmapYAML
		else
			echo "Unknown"
			return
		fi
	fi
	echo $adminuserkey
}

function getOrgID {
	# looks up orgid from the orgid config map if it exists or creates it if it doesn't
	typeset orgid
	if kubectl get configmap -n $NAMESPACE orgid > /dev/null 2>&1; then
		# retrieve the org id from the config map and return them
		orgid=$(kubectl get configmap -n $NAMESPACE orgid --no-headers=true -o json | jq -r .data.orgid)
	else
		# get the admin user key from the dashboard logs, store it for next time and return it
		typeset dashboardPod
		typeset configmapYAML
		dashboardPod=$(kubectl get pods -n $NAMESPACE | awk '/dashboard-tyk-pro/ {print $1; exit}')
		orgid=$(kubectl logs $dashboardPod -n $NAMESPACE | awk '/Default Org/ {print $5; exit}' | cut -d\{ -f 2)
		if [[ -n $orgid ]]; then
			configmapYAML=$(mktemp /tmp/configmapYAML.yaml.XXXX)
			echo "apiVersion: v1" > $configmapYAML
			echo "data:" >> $configmapYAML
			echo "  orgid: $orgid" >> $configmapYAML
			echo "kind: ConfigMap" >> $configmapYAML
			echo "metadata:" >> $configmapYAML
			echo "  namespace: \"$NAMESPACE\"" >> $configmapYAML
			echo "  name: orgid" >> $configmapYAML
			kubectl apply -f $configmapYAML -n $NAMESPACE > /dev/null 2>&1
			rm -f $configmapYAML
		else
			echo "Unknown"
			return
		fi
	fi
	echo $orgid
}

function getStandaloneGatewayPort {
  kubectl get svc -n $NAMESPACE gateway-svc-tyk-pro-tyk-headless --no-headers=true | awk -F '[:/ ]+' '{print $6}'
}

# can't get redis, mongo, postres info because they're not exposed with help charts
# also can't get orgid and admin key details because redis isn't exposed
function reportSanboxInfo {
	if [[ $HSBX_TYPE == 'pro' ]]; then
		echo "$NAMESPACE.Description:       $(getDescription)"
		echo "$NAMESPACE.dashboard:         http://$IP:$(getDashboardPort)/"
		echo "$NAMESPACE.control-gateway:   http://$IP:$(getGatewayPort)/"
		echo "$NAMESPACE.AdminKey:          $(getAdminUserKey)"
		echo "$NAMESPACE.OrgID:             $(getOrgID)"
	fi
	if [[ $HSBX_TYPE == 'headless' ]]; then
		echo "$NAMESPACE.gateway:   http://$IP:$(getStandaloneGatewayPort)/"
	fi
	# if the namespace has the label 'istio-injection=enabled' then report the istio-system services
	if kubectl get ns --show-labels --no-headers=true $NAMESPACE | grep -q $ISTIO_INJECTION_LABEL; then
		echo "Kiali:                        http://$IP:$(kubectl get svc -n istio-system kiali --no-headers=true | awk -F '[:/ ]+' '{print $6}')/"
		echo "Grafana:                      http://$IP:$(kubectl get svc -n istio-system grafana --no-headers=true | awk -F '[:/ ]+' '{print $6}')/"
		echo "Tracing:                      http://$IP:$(kubectl get svc -n istio-system tracing --no-headers=true | awk -F '[:/ ]+' '{print $6}')/"
	fi
}

# process commands
if [[ $# -gt 0 ]]; then
	case $1 in
		create)
			shift
			while getopts :v:st:i arg; do
				case $arg in
					i)
						# add the istio label to the namespace so it's picked up by istio
						EXTRA_NAMESPACE_LABELS="$ISTIO_INJECTION_LABEL $EXTRA_NAMESPACE_LABELS"
						;;
					s)
						# stand alone install
						HSBX_TYPE=headless
						;;
					t)
						# the description of the sandbox
						HSBX_DESCRIPTION="$OPTARG"
						;;
					v)
						# the base version to lookup in tyk-versions.list
						sandboxVersion=$OPTARG
						;;
					:)
						echo "[FATAL]Option -$OPTARG requires an arguement."
						exit 1
						;;
					\?)
						echo "[FATAL]Invalid option: -$OPTARG"
						exit 1
						;;
				esac
			done
			NAMESPACE=hsandbox-$(nextFreeNamespace)
			if [[ -z $HSBX_DESCRIPTION || -z $sandboxVersion ]]; then
				echo "[FATAL]Both -v and -t must be set"
				help
				exit 1
			fi
			if ! namespaceExists $NAMESPACE; then
				if egrep -q "^$sandboxVersion," $VERSIONFILE; then
					loadVersions $(grep -e "^$sandboxVersion," $VERSIONFILE | head -1)
					echo "[INFO]Using Gateway $HSBX_GATE_VERS, Dashboard $HSBX_DASH_VERS, Pump $HSBX_PUMP_VERS"
				else
					echo "[FATAL]Unable to find '$sandboxVersion' in '$VERSIONFILE'"
					exit 1
				fi
				createNamespace
				deployRedis
				if [[ $HSBX_TYPE == "pro" ]]; then
					deployMongodb
					deployPro
					deployOperatorContext
					deployAPIs $SCRIPTDIR/operator/APIs/*.yaml
				else
					deployHeadless
				fi
				listPods
				reportSanboxInfo
			else
				echo "[FATAL]Namespace $NAMESPACE already exists"
				exit 1
			fi
			;;
		delete | rm | del)
			shift
			if [[ $# -lt 1 ]]; then
				echo "[FATAL]Must provide namespace"
				exit 1
			fi
			typeset API
			typeset OC
			for NAMESPACE in $*; do
				if namespaceExists $NAMESPACE; then
					echo "[INFO]Deleting Namespace $NAMESPACE"
					# clean up the APIs first
					echo "[INFO]Deleting ApiDefinitions from $NAMESPACE"
					for API in $(kubectl get ApiDefinition -n $NAMESPACE --no-headers=true | awk '{print $1}'); do
						# have to remove the API finalizer to stop the namespace delete hanging
						kubectl get ApiDefinition $API -n $NAMESPACE -o yaml | yq 'del(.metadata.finalizers[])' | kubectl apply -f -
					done
					echo "[INFO]kubectl delete ApiDefinition --all -n $NAMESPACE"
					kubectl delete ApiDefinition --all -n $NAMESPACE
					# delete OperatorContext finalizer since it can hang too
					echo "[INFO]Deleting OperatorContext from $NAMESPACE"
					for OC in $(kubectl get OperatorContext -n $NAMESPACE --no-headers=true | awk '{print $1}'); do
						# have to remove the API finalizer to stop the namespace delete hanging
						kubectl get OperatorContext $OC -n $NAMESPACE -o yaml | yq 'del(.metadata.finalizers[])' | kubectl apply -f -
					done
					sleep 1 # needed or the OperatorContext still hangs
					echo "[INFO]kubectl delete OperatorContext --all -n $NAMESPACE"
					kubectl delete OperatorContext --all -n $NAMESPACE
					echo "[INFO]kubectl delete namespace $NAMESPACE --wait"
					kubectl delete namespace $NAMESPACE --wait
				else
					echo "[FATAL]Namespace '$NAMESPACE' does not exist"
					exit 1
				fi
			done
			;;
		info)
			shift
			if [[ $# -lt 1 ]]; then
				echo "[FATAL]Must provide namespace"
				exit 1
			fi
			for NAMESPACE in $*; do
				if namespaceExists $NAMESPACE; then
					getInstallType
					echo $NAMESPACE:
					listPods
					reportSanboxInfo
				else
					echo "[FATAL]Namespace '$NAMESPACE' does not exist"
					exit 1
				fi
				echo
			done
			;;
		list)
			shift
			echo "[INFO]kubectl get namespaces --selector=$NAMESPACE_SELECTOR"
			kubectl get namespaces --selector=$NAMESPACE_SELECTOR
			;;
		publish)
			shift
			if [[ $# -lt 2 ]]; then
				echo "[FATAL]Must provide namespace and path to API YAML file"
				exit 1
			fi
			NAMESPACE=$1
			shift
			if namespaceExists $NAMESPACE; then
				deployAPIs $*
			fi
			;;
		setup)
			# needs to install the helm charts, cert manager and setup the tyk-operator-system namespace
			# install cert manager
			kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.8.0/cert-manager.yaml
			helm repo add tyk-helm https://helm.tyk.io/public/helm/charts/
			helm repo update
			kubectl create namespace tyk-operator-system
			kubectl create secret -n tyk-operator-system generic tyk-operator-conf --from-literal "TYK_TLS_INSECURE_SKIP_VERIFY=true"
			helm install tyk-operator tyk-helm/tyk-operator -n tyk-operator-system
			;;
		shell)
			shift
			if [[ $# -lt 1 ]]; then
				echo "[FATAL]Must provide namespace"
				exit 1
			fi
			NAMESPACE=$1
			shift
			if namespaceExists $NAMESPACE; then
				runShell $*
			else
				echo "[FATAL]No such ksandbox: $NAMESPACE"
			fi
			;;
		upgrade)
			echo helm upgrade -n tyk-operator-system tyk-operator tyk-helm/tyk-operator --wait
			helm upgrade -n tyk-operator-system tyk-operator tyk-helm/tyk-operator --wait
			;;
		*)
			echo "[FATAL]Command '$1' not implemented"
			;;
	esac
else
	help
	exit 1
fi
